<!DOCTYPE html>
<html>
    <head>
        <title><%=typeof title == 'undefined' ? 'LastPlay' : title%></title>

        <!-- Viewport mobile tag for sensible mobile support -->
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.3/angular.min.js"></script>
        <!-- a Flowplayer skin -->
        <link rel="stylesheet" href="//releases.flowplayer.org/6.0.5/skin/minimalist.css">
        <!-- Flowplayer quality selector stylesheet -->
        <link rel="stylesheet" href="//releases.flowplayer.org/quality-selector/flowplayer.quality-selector.css">

        <!-- ... -->
        <!-- Flowplayer library -->
        <script src="//releases.flowplayer.org/6.0.5/flowplayer.min.js"></script>
        <!-- Flowplayer hlsjs engine -->
        <script src="//releases.flowplayer.org/hlsjs/flowplayer.hlsjs.min.js"></script>
                <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
        -->

        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.1/css/font-awesome.min.css">
        <!--STYLES-->
        <link rel="stylesheet" href="/styles/bulma.min.css">
        <link rel="stylesheet" href="/styles/importer.css">
        <link rel="stylesheet" href="/styles/sweetalert.css">
        <!--STYLES END-->
    </head>


    <body ng-app="superfood">
    <br>
        <nav style="margin-left:20px" class="navbar-left">
            <p class="navbar-item has-text-centered">
                <a style="color:black" class="linkhover" href="/home"><img src="/images/logo.png" alt="" style="height: 55px;"></a>
            </p>
            <p class="navbar-item has-text-centered">
                <a style="color:black" class="linkhover" href="/home">Home</a>
            </p>
            <p class="navbar-item has-text-centered">
                <a style="color:black" class="linkhover" href="/contact">Contact</a>
            </p>
        </nav>


        <%- body %>



        <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
            -->

          <!--TEMPLATES-->
          
          <!--TEMPLATES END-->


          <!--

          Client-side Javascript
          ========================

          You can always bring in JS files manually with `script` tags, or asynchronously
          on the client using a solution like AMD (RequireJS).  Or, if you like, you can
          take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

          By default, files in your `assets/js` folder are included here
          automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
          CoffeeScript (.coffee) are supported. In production, your scripts will be minified
          and concatenated into a single file.

          To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
          For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

      -->

      <!--SCRIPTS-->
      <script src="/js/dependencies/sails.io.js"></script>
      <script src="/js/dependencies/sweetalert.min.js"></script>
      <script src="/js/ang.js"></script>
      <script src="/js/contact.js"></script>
      <script src="/js/home.js"></script>
      <script src="/js/login.js"></script>
      <script src="/js/profile.js"></script>
      <script src="/js/register.js"></script>
      <script src="/js/sweetalert.min.js"></script>
      <!--SCRIPTS END-->
    </body>

       <div ng-controller="home" style="margin-top:100px" class="container">
           <table class="table">
               <thead>
                   <tr>
                       <th>MLB Games</th>
                       <th>Score</th>
                       <th>Link</th>
                   </tr>
               </thead>
               <tbody>
                   <tr ng-repeat="game in mlbgames">
                       <td>
                           {{game.away}} @ {{game.home}}
                       </td>
                       <td>0-0</td>
                       <td class="is-link is-icon">
                           <a href="/heat">
                               <i class="fa fa-link"></i>
                           </a>
                       </td>
                   </tr>
               </tbody>
            </table>

            
            <table class="table">
                <thead>
                    <tr>
                        <th>NBA Games</th>
                        <th>Score</th>
                        <th>Link</th>
                    </tr>
                </thead>
                <tbody>
                    <tr ng-repeat="game in nbagames">
                        <td>
                            {{game.away}} @ {{game.home}}
                        </td>
                        <td>0-0</td>
                        <td class="is-link is-icon">
                            <a href="/heat">
                                <i class="fa fa-link"></i>
                            </a>
                        </td>
                    </tr>
                </tbody>
            </table>
       </div>
</html>
